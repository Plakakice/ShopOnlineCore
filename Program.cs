using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity.UI.Services;
using ShopOnlineCore.Services;
using ShopOnlineCore.Models;
using ShopOnlineCore.Models.Identity;

var builder = WebApplication.CreateBuilder(args);

// ==================== DATABASE + IDENTITY ====================
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders();

// ==================== MVC + SESSION + RAZOR ====================
builder.Services.AddControllersWithViews();
builder.Services.AddRazorPages();
builder.Services.AddDistributedMemoryCache();
builder.Services.AddSession();

// üì® Gi·∫£ l·∫≠p EmailSender ƒë·ªÉ tr√°nh l·ªói khi ƒëƒÉng k√Ω user
builder.Services.AddTransient<IEmailSender, EmailSender>();

var app = builder.Build();

// ==================== PIPELINE ====================
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseSession();
app.UseAuthentication();
app.UseAuthorization();

app.MapRazorPages();
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

async Task CreateAdminRole(WebApplication app)
{
    using var scope = app.Services.CreateScope();
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

    // T·∫°o role "Admin" n·∫øu ch∆∞a c√≥
    if (!await roleManager.RoleExistsAsync("Admin"))
        await roleManager.CreateAsync(new IdentityRole("Admin"));

    // Email admin c·ªë ƒë·ªãnh
    var adminEmail = "admin@shop.com";
    var adminPassword = "Admin@123"; // b·∫°n c√≥ th·ªÉ ƒë·ªïi

    // T·∫°o t√†i kho·∫£n admin n·∫øu ch∆∞a c√≥
    var adminUser = await userManager.FindByEmailAsync(adminEmail);
    if (adminUser == null)
    {
        adminUser = new ApplicationUser
        {
            UserName = adminEmail,
            Email = adminEmail,
            EmailConfirmed = true
        };
        await userManager.CreateAsync(adminUser, adminPassword);
    }

    // G√°n quy·ªÅn Admin cho t√†i kho·∫£n ƒë√≥
    if (!await userManager.IsInRoleAsync(adminUser, "Admin"))
        await userManager.AddToRoleAsync(adminUser, "Admin");
}

// G·ªçi h√†m kh·ªüi t·∫°o Admin khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
await CreateAdminRole(app);

app.Run();

